// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Auth --------------------------------------
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  BlogUser BlogUser[]
  Post Post[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
// Auth --------------------------------------

// DB --------------------------------------
model Blog {
  id    String @id @default(cuid())
  title String @db.VarChar(60)
  subtitle String? @db.VarChar(191)
  slug String @db.VarChar(60) 
  bgColor String @default("#ffffff") @db.VarChar(45)
  textColor String @default("#000000") @db.VarChar(45)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  users BlogUser[]
  posts Post[]

  @@unique([slug])
  @@map("blogs")
}

enum Role {
  OWNER
  AUTHOR
  ADMIN
  EDITOR
}

model BlogUser {
  id String @id @default(cuid())
  role Role @default(AUTHOR)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_users")
}

model Post {
  id String @id @default(cuid())
  title String @db.VarChar(100)
  subtitle String? @db.VarChar(100)
  slug String @db.VarChar(60) 
  body String @db.Text
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@unique([slug])
  @@map("blog_posts")
}

